// Code generated by mfd-generator v0.6.0; DO NOT EDIT.

//nolint:all
//lint:file-ignore U1000 ignore unused code, it's generated
package db

import (
	"unicode/utf8"
)

const (
	ErrEmptyValue = "empty"
	ErrMaxLength  = "len"
	ErrWrongValue = "value"
)

func (ar AdminRole) Validate() (errors map[string]string, valid bool) {
	errors = map[string]string{}

	if utf8.RuneCountInString(ar.RoleName) > 255 {
		errors[Columns.AdminRole.RoleName] = ErrMaxLength
	}

	return errors, len(errors) == 0
}

func (a Admin) Validate() (errors map[string]string, valid bool) {
	errors = map[string]string{}

	if utf8.RuneCountInString(a.Login) > 255 {
		errors[Columns.Admin.Login] = ErrMaxLength
	}

	if utf8.RuneCountInString(a.Email) > 255 {
		errors[Columns.Admin.Email] = ErrMaxLength
	}

	if utf8.RuneCountInString(a.PasswordHash) > 255 {
		errors[Columns.Admin.PasswordHash] = ErrMaxLength
	}

	return errors, len(errors) == 0
}

func (lt LogType) Validate() (errors map[string]string, valid bool) {
	errors = map[string]string{}

	if utf8.RuneCountInString(lt.TypeName) > 255 {
		errors[Columns.LogType.TypeName] = ErrMaxLength
	}

	return errors, len(errors) == 0
}

func (sl ServiceLog) Validate() (errors map[string]string, valid bool) {
	errors = map[string]string{}

	return errors, len(errors) == 0
}

func (st ServiceType) Validate() (errors map[string]string, valid bool) {
	errors = map[string]string{}

	if utf8.RuneCountInString(st.TypeName) > 255 {
		errors[Columns.ServiceType.TypeName] = ErrMaxLength
	}

	return errors, len(errors) == 0
}

func (su ServiceUser) Validate() (errors map[string]string, valid bool) {
	errors = map[string]string{}

	if su.Nickname != nil && utf8.RuneCountInString(*su.Nickname) > 255 {
		errors[Columns.ServiceUser.Nickname] = ErrMaxLength
	}

	return errors, len(errors) == 0
}

func (s Service) Validate() (errors map[string]string, valid bool) {
	errors = map[string]string{}

	if utf8.RuneCountInString(s.Name) > 255 {
		errors[Columns.Service.Name] = ErrMaxLength
	}

	if utf8.RuneCountInString(s.ApiKey) > 255 {
		errors[Columns.Service.ApiKey] = ErrMaxLength
	}

	return errors, len(errors) == 0
}
