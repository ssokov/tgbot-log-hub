// Code generated by mfd-generator v0.6.0; DO NOT EDIT.

//nolint:all
//lint:file-ignore U1000 ignore unused code, it's generated
package db

import (
	"time"
)

var Columns = struct {
	AdminRole struct {
		ID, RoleName, CreatedAt string
	}
	Admin struct {
		ID, Login, Email, PasswordHash, RoleID, Status, CreatedAt string

		Role string
	}
	LogType struct {
		ID, TypeName string
	}
	ServiceLog struct {
		ID, TypeID, ErrorCode, Message, ServiceID, UserID, AdditionalData, CreatedAt string

		Type, Service, User string
	}
	ServiceType struct {
		ID, TypeName string
	}
	ServiceUser struct {
		ID, TgID, Nickname, Params, CreatedAt string
	}
	Service struct {
		ID, Name, TypeID, ApiKey, Status, CreatedAt string

		Type string
	}
	ServiceAdmins struct {
		ServiceID, AdminID, AssignedAt string

		Service, Admin string
	}
}{
	AdminRole: struct {
		ID, RoleName, CreatedAt string
	}{
		ID:        "id",
		RoleName:  "role_name",
		CreatedAt: "created_at",
	},
	Admin: struct {
		ID, Login, Email, PasswordHash, RoleID, Status, CreatedAt string

		Role string
	}{
		ID:           "id",
		Login:        "login",
		Email:        "email",
		PasswordHash: "password_hash",
		RoleID:       "role_id",
		Status:       "status",
		CreatedAt:    "created_at",

		Role: "Role",
	},
	LogType: struct {
		ID, TypeName string
	}{
		ID:       "id",
		TypeName: "type_name",
	},
	ServiceLog: struct {
		ID, TypeID, ErrorCode, Message, ServiceID, UserID, AdditionalData, CreatedAt string

		Type, Service, User string
	}{
		ID:             "id",
		TypeID:         "type_id",
		ErrorCode:      "error_code",
		Message:        "message",
		ServiceID:      "service_id",
		UserID:         "user_id",
		AdditionalData: "additional_data",
		CreatedAt:      "created_at",

		Type:    "Type",
		Service: "Service",
		User:    "User",
	},
	ServiceType: struct {
		ID, TypeName string
	}{
		ID:       "id",
		TypeName: "type_name",
	},
	ServiceUser: struct {
		ID, TgID, Nickname, Params, CreatedAt string
	}{
		ID:        "id",
		TgID:      "tg_id",
		Nickname:  "nickname",
		Params:    "params",
		CreatedAt: "created_at",
	},
	Service: struct {
		ID, Name, TypeID, ApiKey, Status, CreatedAt string

		Type string
	}{
		ID:        "id",
		Name:      "name",
		TypeID:    "type_id",
		ApiKey:    "api_key",
		Status:    "status",
		CreatedAt: "created_at",

		Type: "Type",
	},
	ServiceAdmins: struct {
		ServiceID, AdminID, AssignedAt string

		Service, Admin string
	}{
		ServiceID:  "service_id",
		AdminID:    "admin_id",
		AssignedAt: "assigned_at",

		Service: "Service",
		Admin:   "Admin",
	},
}

var Tables = struct {
	AdminRole struct {
		Name, Alias string
	}
	Admin struct {
		Name, Alias string
	}
	LogType struct {
		Name, Alias string
	}
	ServiceLog struct {
		Name, Alias string
	}
	ServiceType struct {
		Name, Alias string
	}
	ServiceUser struct {
		Name, Alias string
	}
	Service struct {
		Name, Alias string
	}
	ServiceAdmins struct {
		Name, Alias string
	}
}{
	AdminRole: struct {
		Name, Alias string
	}{
		Name:  "admin_roles",
		Alias: "t",
	},
	Admin: struct {
		Name, Alias string
	}{
		Name:  "admins",
		Alias: "t",
	},
	LogType: struct {
		Name, Alias string
	}{
		Name:  "log_types",
		Alias: "t",
	},
	ServiceLog: struct {
		Name, Alias string
	}{
		Name:  "service_logs",
		Alias: "t",
	},
	ServiceType: struct {
		Name, Alias string
	}{
		Name:  "service_types",
		Alias: "t",
	},
	ServiceUser: struct {
		Name, Alias string
	}{
		Name:  "service_users",
		Alias: "t",
	},
	Service: struct {
		Name, Alias string
	}{
		Name:  "services",
		Alias: "t",
	},
	ServiceAdmins: struct {
		Name, Alias string
	}{
		Name:  "services_admins",
		Alias: "t",
	},
}

type AdminRole struct {
	tableName struct{} `pg:"admin_roles,alias:t,discard_unknown_columns"`

	ID        int       `pg:"id,pk"`
	RoleName  string    `pg:"role_name,use_zero"`
	CreatedAt time.Time `pg:"created_at,use_zero"`
}

type Admin struct {
	tableName struct{} `pg:"admins,alias:t,discard_unknown_columns"`

	ID           int       `pg:"id,pk"`
	Login        string    `pg:"login,use_zero"`
	Email        string    `pg:"email,use_zero"`
	PasswordHash string    `pg:"password_hash,use_zero"`
	RoleID       int       `pg:"role_id,use_zero"`
	Status       int       `pg:"status,use_zero"`
	CreatedAt    time.Time `pg:"created_at,use_zero"`

	Role *AdminRole `pg:"fk:role_id,rel:has-one"`
}

type LogType struct {
	tableName struct{} `pg:"log_types,alias:t,discard_unknown_columns"`

	ID       int    `pg:"id,pk"`
	TypeName string `pg:"type_name,use_zero"`
}

type ServiceLog struct {
	tableName struct{} `pg:"service_logs,alias:t,discard_unknown_columns"`

	ID             int                       `pg:"id,pk"`
	TypeID         int                       `pg:"type_id,use_zero"`
	ErrorCode      *int                      `pg:"error_code"`
	Message        *string                   `pg:"message"`
	ServiceID      int                       `pg:"service_id,use_zero"`
	UserID         *int64                    `pg:"user_id"`
	AdditionalData *ServiceLogAdditionalData `pg:"additional_data"`
	CreatedAt      time.Time                 `pg:"created_at,use_zero"`

	Type    *LogType     `pg:"fk:type_id,rel:has-one"`
	Service *Service     `pg:"fk:service_id,rel:has-one"`
	User    *ServiceUser `pg:"fk:user_id,rel:has-one"`
}

type ServiceType struct {
	tableName struct{} `pg:"service_types,alias:t,discard_unknown_columns"`

	ID       int    `pg:"id,pk"`
	TypeName string `pg:"type_name,use_zero"`
}

type ServiceUser struct {
	tableName struct{} `pg:"service_users,alias:t,discard_unknown_columns"`

	ID        int                `pg:"id,pk"`
	TgID      int                `pg:"tg_id,use_zero"`
	Nickname  *string            `pg:"nickname"`
	Params    *ServiceUserParams `pg:"params"`
	CreatedAt time.Time          `pg:"created_at,use_zero"`
}

type Service struct {
	tableName struct{} `pg:"services,alias:t,discard_unknown_columns"`

	ID        int       `pg:"id,pk"`
	Name      string    `pg:"name,use_zero"`
	TypeID    *int      `pg:"type_id"`
	ApiKey    string    `pg:"api_key,use_zero"`
	Status    int       `pg:"status,use_zero"`
	CreatedAt time.Time `pg:"created_at,use_zero"`

	Type *ServiceType `pg:"fk:type_id,rel:has-one"`
}

type ServiceAdmins struct {
	tableName struct{} `pg:"services_admins,alias:t,discard_unknown_columns"`

	ServiceID  int       `pg:"service_id,pk"`
	AdminID    int       `pg:"admin_id,pk"`
	AssignedAt time.Time `pg:"assigned_at,use_zero"`

	Service *Service `pg:"fk:service_id,rel:has-one"`
	Admin   *Admin   `pg:"fk:admin_id,rel:has-one"`
}
