basePath: /api
definitions:
  handlers.APIKeyResponse:
    properties:
      api_key:
        example: abcd1234
        type: string
    type: object
  handlers.ErrorResponse:
    properties:
      message:
        example: bad request
        type: string
    type: object
  handlers.Log:
    properties:
      error_code:
        example: 500
        type: integer
      message:
        example: invalid tg_id
        type: string
      params:
        type: object
      tg_user_id:
        example: 123456789
        type: integer
      timestamp:
        example: "2025-10-22T12:34:56Z"
        type: string
      type:
        example: error
        type: string
    type: object
  handlers.LogSearch:
    properties:
      end_date:
        example: "2025-10-22T23:59:59Z"
        type: string
      error_code:
        example: 500
        type: integer
      start_date:
        example: "2025-10-01T00:00:00Z"
        type: string
      text:
        example: something
        type: string
      type:
        example: error
        type: string
    type: object
  handlers.LoginRequest:
    properties:
      password:
        example: password123
        type: string
      username:
        example: admin
        type: string
    type: object
  handlers.LoginResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  handlers.RegisterRequest:
    properties:
      email:
        example: misha.sokovih@gmail.com
        type: string
      password:
        example: password123
        type: string
      username:
        example: admin
        type: string
    type: object
  handlers.RegisterServiceRequest:
    properties:
      name:
        example: ludomania_bot
        type: string
      type:
        example: telegram_bot
        type: string
    type: object
  handlers.Service:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  handlers.ServiceListResponse:
    properties:
      services:
        items:
          $ref: '#/definitions/handlers.Service'
        type: array
    type: object
  handlers.StatusResponse:
    properties:
      status:
        example: ok
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for tgbot-log-hub application. With this api you can fetch logs
    sent by your telegram bots.
  title: API for tgbot-log-hub
  version: "1.0"
paths:
  /{id}/services/logs/filter:
    post:
      consumes:
      - application/json
      description: Get logs for a service by ID. Фильтры передаются в теле запроса.
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: string
      - description: Log search filters
        in: body
        name: search
        required: true
        schema:
          $ref: '#/definitions/handlers.LogSearch'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.Log'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get logs with filters
      tags:
      - Service
  /admin/login:
    post:
      consumes:
      - application/json
      description: Login with username and password to receive JWT token
      parameters:
      - description: Admin login data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token returned
          schema:
            $ref: '#/definitions/handlers.LoginResponse'
        "400":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Admin login
      tags:
      - Admin
  /admin/logout:
    post:
      consumes:
      - application/json
      description: Invalidate admin JWT token (if token tracking is implemented)
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged out
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Admin logout
      tags:
      - Admin
  /admin/register:
    post:
      consumes:
      - application/json
      description: Create a new admin account
      parameters:
      - description: Admin registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully registered
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Register a new admin
      tags:
      - Admin
  /services:
    get:
      consumes:
      - application/json
      parameters:
      - description: Admin flag to include inactive/hidden services
        in: query
        name: admin
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ServiceListResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: List available services
      tags:
      - Service
  /services/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.StatusResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Delete a service
      tags:
      - Service
  /services/{id}/logs:
    get:
      consumes:
      - application/json
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.Log'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get all logs for a service
      tags:
      - Service
  /services/apikey:
    get:
      consumes:
      - application/json
      parameters:
      - description: Service name (query param)
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.APIKeyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get API Key for a service
      tags:
      - Service
  /services/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Service registration payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterServiceRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.Service'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Register a new service
      tags:
      - Service
swagger: "2.0"
